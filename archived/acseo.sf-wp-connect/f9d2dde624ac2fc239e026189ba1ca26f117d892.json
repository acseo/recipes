{
    "manifests": {
        "acseo/sf-wp-connect": {
            "manifest": {
                "env": {
                    "API_WP_TOKEN": "%generate(secret)%"
                },
                "copy-from-recipe": {
                    "config": "%CONFIG_DIR%/",
                    "src": "%SRC_DIR%/"
                },
                "post-install-output": [
                    "<fg=blue>C'est pr\u00eat !</> Vous pouvez maintenant :",
                    "  1. D\u00e9velopper vos routes d'API dans le dossier <comment>src/Controller/ApiWP</comment>",
                    "  2. Renseigner une valeur pour la variable d'environnement <comment>WP_API_TOKEN</comment>",
                    "  3. Mettre en place ensuite cette variable d'environnement sur vos diff\u00e9rents environnements (fichier d'env enregistr\u00e9s sur GitLab pour la CI, fichier .env du serveur de prod...)"
                ]
            },
            "files": {
                "config/packages/security.yaml": {
                    "contents": [
                        "security:",
                        "    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords",
                        "    password_hashers:",
                        "        Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface: 'auto'",
                        "    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider",
                        "    providers:",
                        "        users_in_memory: { memory: null }",
                        "        api_wp_provider:",
                        "            memory:",
                        "                users:",
                        "                    api_wp: { roles: ['ROLE_API_WP'] }",
                        "    firewalls:",
                        "        dev:",
                        "            pattern: ^/(_(profiler|wdt)|css|images|js)/",
                        "            security: false",
                        "        api_wp:",
                        "            pattern: ^/api/wp/",
                        "            stateless: true",
                        "            provider: api_wp_provider",
                        "            # logout: ~",
                        "            custom_authenticator: App\\Security\\ApiWpAuthenticator",
                        "        main:",
                        "            lazy: true",
                        "            provider: users_in_memory",
                        "",
                        "            # activate different ways to authenticate",
                        "            # https://symfony.com/doc/current/security.html#the-firewall",
                        "",
                        "            # https://symfony.com/doc/current/security/impersonating_user.html",
                        "            # switch_user: true",
                        "",
                        "    # Easy way to control access for large sections of your site",
                        "    # Note: Only the *first* access control that matches will be used",
                        "    access_control:",
                        "        - { path: ^/api/wp, roles: ROLE_API_WP }",
                        "        # - { path: ^/admin, roles: ROLE_ADMIN }",
                        "        # - { path: ^/profile, roles: ROLE_USER }",
                        "",
                        "when@test:",
                        "    security:",
                        "        password_hashers:",
                        "            # By default, password hashers are resource intensive and take time. This is",
                        "            # important to generate secure password hashes. In tests however, secure hashes",
                        "            # are not important, waste resources and increase test times. The following",
                        "            # reduces the work factor to the lowest possible values.",
                        "            Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface:",
                        "                algorithm: auto",
                        "                cost: 4 # Lowest possible value for bcrypt",
                        "                time_cost: 3 # Lowest possible value for argon",
                        "                memory_cost: 10 # Lowest possible value for argon",
                        ""
                    ],
                    "executable": false
                },
                "config/routes.yaml": {
                    "contents": [
                        "controllers:",
                        "    resource: ../src/Controller/**/*",
                        "    type: attribute",
                        "    exclude: ../src/Controller/ApiWp",
                        "",
                        "apis_wp:",
                        "    resource: ../src/Controller/ApiWp",
                        "    type: attribute",
                        "    prefix: '/api/wp'",
                        "    name_prefix: 'app_api_wp_'",
                        ""
                    ],
                    "executable": false
                },
                "config/services.yaml": {
                    "contents": [
                        "# This file is the entry point to configure your own services.",
                        "# Files in the packages/ subdirectory configure your dependencies.",
                        "",
                        "# Put parameters here that don't need to change on each machine where the app is deployed",
                        "# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration",
                        "parameters:",
                        "",
                        "services:",
                        "    # default configuration for services in *this* file",
                        "    _defaults:",
                        "        autowire: true      # Automatically injects dependencies in your services.",
                        "        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.",
                        "        bind:",
                        "            string $apiWpToken: '%env(API_WP_TOKEN)%'",
                        "",
                        "    # makes classes in src/ available to be used as services",
                        "    # this creates a service per class whose id is the fully-qualified class name",
                        "    App\\:",
                        "        resource: '../src/'",
                        "        exclude:",
                        "            - '../src/DependencyInjection/'",
                        "            - '../src/Entity/'",
                        "            - '../src/Kernel.php'",
                        "",
                        "    # add more service definitions when explicit configuration is needed",
                        "    # please note that last definitions always *replace* previous ones",
                        ""
                    ],
                    "executable": false
                },
                "src/ApiWp/.gitignore": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "src/ApiWp/DefaultController.php": {
                    "contents": [
                        "<?php",
                        "",
                        "namespace App\\Controller\\ApiWp;",
                        "",
                        "use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;",
                        "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
                        "use Symfony\\Component\\Routing\\Annotation\\Route;",
                        "",
                        "#[Route('', name: 'default_')]",
                        "class DefalutController extends AbstractController",
                        "{",
                        "    #[Route('', name: 'index')]",
                        "    public function index(): JsonResponse",
                        "    {",
                        "        return $this->json(['message' => 'You can now override this controller to set your own logic !']);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Security/ApiWpAuthenticator.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace App\\Security;",
                        "",
                        "use Symfony\\Component\\HttpFoundation\\JsonResponse;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;",
                        "use Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;",
                        "use Symfony\\Component\\Security\\Core\\Exception\\CustomUserMessageAuthenticationException;",
                        "use Symfony\\Component\\Security\\Http\\Authenticator\\AbstractAuthenticator;",
                        "use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;",
                        "use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Passport;",
                        "use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\SelfValidatingPassport;",
                        "",
                        "class ApiWpAuthenticator extends AbstractAuthenticator",
                        "{",
                        "    public function __construct(",
                        "        protected string $apiWpToken,",
                        "    ) {",
                        "    }",
                        "",
                        "    public function supports(Request $request): ?bool",
                        "    {",
                        "        return $request->headers->has('X-AUTH-TOKEN');",
                        "    }",
                        "",
                        "    public function authenticate(Request $request): Passport",
                        "    {",
                        "        $token = $request->headers->get('X-AUTH-TOKEN');",
                        "        if (null === $token || $this->apiWpToken !== $token) {",
                        "            throw new CustomUserMessageAuthenticationException('Invalid API token provided');",
                        "        }",
                        "",
                        "        return new SelfValidatingPassport(new UserBadge('api_wp'));",
                        "    }",
                        "",
                        "    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response",
                        "    {",
                        "        // on success, let the request continue",
                        "        return null;",
                        "    }",
                        "",
                        "    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response",
                        "    {",
                        "        return new JsonResponse(['message' => 'Authentication Failure!'], Response::HTTP_UNAUTHORIZED);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "f9d2dde624ac2fc239e026189ba1ca26f117d892"
        }
    }
}
